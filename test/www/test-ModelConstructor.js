describe('Model Constructor', function() {
	'use strict';

	it('is a constructor function', function() {
		var User = Model.User;
		expect(User).to.be.a('function');
	});

	it('has `modelOptions` property', function() {
		var User = Model.User;
		expect(User).to.have.property('modelOptions');
	});

	it('`modelOptions` has `name` property with type of string', function() {
		var User = Model.User;
		expect(User.modelOptions).to.have.property('name');
		expect(User.modelOptions.name).to.be.a('string');
	});

	it('`modelOptions` has `props` property with type of array of strings', function() {
		var User = Model.User;
		expect(User.modelOptions).to.have.property('props');
		expect(User.modelOptions.props).to.be.a('array');
		expect(User.modelOptions.props[0]).to.be.a('string');
	});

	describe('#createCollection()', function() {
		'use strict';

		it('exist', function() {
			var User = Model.User;
			expect(User).to.have.property('createCollection');
		});

		it('returns new instance of `md.Collection`', function() {
			var User = Model.User;
			var userCollection = User.createCollection();
			expect(userCollection).to.be.an.instanceof(md.Collection);
			expect(userCollection.__options.model).to.exist;
			expect(userCollection.__options.model).to.equal(User);
		});

	});

	describe('#createModels()', function() {
		'use strict';

		it('exist', function() {
			expect(Model.User.createModels).to.be.a.function;
		});

		it('convert array of object-data to array of models', function() {
			var models = Model.User.createModels([{
				name: 'Foo'
			}, {
				name: 'Bar'
			}]);
			expect(models[0].name()).to.equal('Foo');
			expect(models[1].name()).to.equal('Bar');
		});

		it('create with parser', function() {
			var models = Model.Note.createModels([{
				wrap: {
					title: 'Foo',
					inner: {
						body: 'Bar',
						author: 'Baz'
					}
				}
			}]);
			expect(models[0].title()).to.equal('Foo');
			expect(models[0].body()).to.equal('Bar');
			expect(models[0].author()).to.equal('Baz');
		});

		it('cache and cache limit', function() {
			var CacheNoteModel = md.model({
				name: 'CacheNoteModel',
				props: ['title', 'body']
			}, {
				cache: true,
				cacheLimit: 2
			});
			var modelsA = CacheNoteModel.createModels([{
				id: '123',
				name: 'Foo',
				body: 'Bar'
			}, {
				id: '456',
				name: 'Foo',
				body: 'Bar'
			}]);
			var modelsB = CacheNoteModel.createModels([{
				id: '123',
				name: 'Foo',
				body: 'Bar'
			}, {
				id: '456',
				name: 'Baz',
				body: 'Tes'
			}, {
				id: '789',
				name: 'Zzz',
				body: 'Xxx'
			}]);
			expect(modelsA.length).to.equal(2);
			expect(modelsB.length).to.equal(3);
			expect(modelsB[0]).to.equal(modelsA[0]);
			expect(modelsB[1]).to.equal(modelsA[1]);
			expect(modelsB[0].lid()).to.equal(modelsA[0].lid());
			expect(modelsB[1].lid()).to.equal(modelsA[1].lid());
			expect(modelsB[2].id()).to.equal('789');
			expect(CacheNoteModel.__cacheCollection.size()).to.equal(2);
			expect(CacheNoteModel.__cacheCollection.contains('123')).to.be.false;
			expect(CacheNoteModel.__cacheCollection.contains('789')).to.be.true;
		});


	});

	describe('#create()', function() {
		'use strict';

		var CacheUser;
		var tempIdA;
		var tempIdB;

		before(function() {
			CacheUser = md.model({
				name: 'CacheUser',
				props: ['name', 'age']
			}, {
				cache: true,
			});
		});

		it('exist', function() {
			expect(CacheUser.create).to.be.a.function;
		});

		it('instantiate model *1', function(done) {
			// Create a model and add to cache but without saving to store
			CacheUser.create({
				id: 'mcid001',
				name: 'Fooz'
			});
			// Create a model, saving to store and add to cache
			var userB = CacheUser.create();
			expect(userB).to.be.instanceof(CacheUser);
			userB.name('Barz');
			// By new keyword
			var userC = new CacheUser({
				name: 'Jazz'
			});
			// userC.save();
			Promise.all([
				userB.save().then(function() {
					// We now have id generated by server
					expect(userB.id()).to.exist;
					tempIdA = userB.id();
				}),
				userC.save().then(function() {
					expect(userC.id()).to.exist;
					tempIdB = userC.id();
				})
			]).then(function() {
				done();
			});
		});

		it('get from cache (should not create new id)', function(done) {
			// Get get model that was create without saving
			var userA = CacheUser.create({
				// User id was created in *1
				id: 'mcid001'
			});
			expect(userA.name()).to.equal('Fooz');
			// Get get model that was create WITH saving
			var userB = CacheUser.create({
				// User id was created in *1
				id: tempIdA
			});
			expect(userB.name()).to.equal('Barz');
			var userC = CacheUser.create({
				// User id was created in *1
				id: tempIdB
			});
			expect(userC.name()).to.equal('Jazz');
			var userCA = new CacheUser({
				id: tempIdB
			});
			userCA.fetch().then(function() {
				expect(userCA.name()).to.equal('Jazz');
				done();
			});
		});

	});

	describe('#pull()', function() {
		'use strict';

		var _ids = [];
		var _models = {};

		before(function(done) {
			var len = 5;
			var cnt = 0;
			var user;
			var fn = function(model) {
				_ids.push(model.id());
				_models[model.id()] = model;
				cnt++;
				if (cnt >= len) {
					done();
					return;
				}
			};
			for (var i = len; i > 0; i--) {
				user = new Model.User();
				user.name('Foo' + i);
				user.age(111);
				user.save().then(fn);
			}
		});

		it('exist', function() {
			expect(Model.User.pull).to.exist.and.be.a.function;
		});

		it('should pull (1) - pull by array (of ids)', function(done) {
			// url: /user?0=idabc&1=idxyz
			// if you prefer /user/idabc/idxyz
			// url is parsable through md.config { storeConfigOptions }
			Model.User.pull('/user', [_ids[1], _ids[2]]).then(function(models) {
				try {
					expect(models.length).to.equal(2);
					var m0 = models[0];
					expect(m0.name()).to.equal(_models[m0.id()].name());
					var m1 = models[1];
					expect(m1.name()).to.equal(_models[m1.id()].name());
					done();
				} catch (e) {
					done(e);
				}
			}, function(err) {
				done(err);
			})
		});

		it('should pull (2) - pull by object (query)', function(done) {
			// url: /user?name=Test&age=111
			// if you prefere /user/Test/111
			// url is parsable through md.config { storeConfigOptions }
			Model.User.pull('/user', {
				name: 'Test',
				age: 111
			}).then(function(models) {
				try {
					done();
				} catch (e) {
					done(e);
				}
			}, function(err) {
				done(err);
			})
		});

		it('should pull (3) - pull without data', function(done) {
			Model.User.pull('/user').then(function(models) {
				try {
					expect(models.length).to.above(1);
					done();
				} catch (e) {
					done(e);
				}
			}, function(err) {
				done(err);
			})
		});

		it('pull using callback function', function(done) {
			Model.User.pull('/user', function(err, response, models) {
				if (err) {
					done(err);
					return;
				}
				try {
					expect(response).to.exist;
					expect(models).to.exist;
					done();
				} catch (e) {
					done(e);
				}
			});
		});

		it('pull with path', function(done) {
			Model.User.pull('/users/wrap', {
				path: 'outer.inner.items'
			}, function(err, response, models) {
				if (err) {
					done(err)
					return;
				}
				try {
					expect(response.outer.inner.items).to.exist;
					expect(models.length).to.be.above(3);
					expect(models[0].id()).to.be.not.empty;
					expect(models[0].name()).to.be.not.empty;
					expect(models[0].age()).to.be.not.empty;
					done();
				} catch (e) {
					done(e);
				}
			});
		});

	});

});
